"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _bindObservableAsProps = require("@atom-ide-community/nuclide-commons-ui/bindObservableAsProps");

var React = _interopRequireWildcard(require("react"));

var _rxjs = require("rxjs");

var _Section = require("@atom-ide-community/nuclide-commons-ui/Section");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _event = require("@atom-ide-community/nuclide-commons/event");

var _expected = require("@atom-ide-community/nuclide-commons/expected");

var _LoadingSpinner = require("@atom-ide-community/nuclide-commons-ui/LoadingSpinner");

var _ExpressionTreeComponent = require("./ExpressionTreeComponent");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const NO_VARIABLES = /*#__PURE__*/React.createElement("div", {
  className: "debugger-expression-value-row"
}, /*#__PURE__*/React.createElement("span", {
  className: "debugger-expression-value-content"
}, "(no variables)"));
const LOADING = /*#__PURE__*/React.createElement("div", {
  className: "debugger-expression-value-row"
}, /*#__PURE__*/React.createElement("span", {
  className: "debugger-expression-value-content"
}, /*#__PURE__*/React.createElement(_LoadingSpinner.LoadingSpinner, {
  size: "MEDIUM"
})));

class ScopesComponent extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;
    this._expansionStates = void 0;
    this.state = {
      scopes: _expected.Expect.value([]),
      // UX: Local scope names should be expanded by default.
      expandedScopes: new Set(["Local", "Locals"])
    };
    this._expansionStates = new Map();
    this._disposables = new _UniversalDisposable.default();
  }

  componentDidMount() {
    const {
      viewModel
    } = this.props.service;

    this._disposables.add(_rxjs.Observable.merge((0, _event.observableFromSubscribeFunction)(viewModel.onDidChangeDebuggerFocus.bind(viewModel)).map(() => false), (0, _event.observableFromSubscribeFunction)(viewModel.onDidChangeExpressionContext.bind(viewModel)).map(() => true)).debounceTime(100).startWith(false).switchMap(forceRefresh => this._getScopes(forceRefresh)).subscribe(scopes => {
      this.setState({
        scopes
      });
    }));
  }

  _getScopes(forceRefresh) {
    const {
      focusedStackFrame
    } = this.props.service.viewModel;

    if (focusedStackFrame == null) {
      return _rxjs.Observable.of(_expected.Expect.value([]));
    } else {
      // If refreshing explicitly, don't start with pending because
      // there's no reason to show a spinner in an already-populated
      // scopes tree.
      const result = _rxjs.Observable.fromPromise(focusedStackFrame.getScopes(forceRefresh).then(scopes => _expected.Expect.value(scopes), error => _expected.Expect.error(error)));

      return forceRefresh ? result : _rxjs.Observable.of(_expected.Expect.pending()).concat(result);
    }
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  _renderScopeSection(scope) {
    // Non-local scopes should be collapsed by default since users typically care less about them.
    const expanded = this._isScopeExpanded(scope);

    const ScopeBodyComponent = expanded ? (0, _bindObservableAsProps.bindObservableAsProps)(this._getScopeVariables(scope).map(variables => ({
      variables,
      containerContext: this
    })), ScopeComponent) : () => null;
    return /*#__PURE__*/React.createElement(_Section.Section, {
      key: scope.getId(),
      collapsable: true,
      collapsed: !expanded,
      onChange: isCollapsed => this._setScopeExpanded(scope, !isCollapsed),
      headline: scope.name,
      size: "small"
    }, /*#__PURE__*/React.createElement(ScopeBodyComponent, null));
  }

  _getScopeVariables(scope) {
    return _rxjs.Observable.of(_expected.Expect.pending()).concat(_rxjs.Observable.fromPromise(scope.getChildren().then(variables => _expected.Expect.value(variables), error => _expected.Expect.error(error))));
  }

  _isScopeExpanded(scope) {
    return this.state.expandedScopes.has(scope.name);
  }

  _setScopeExpanded(scope, expanded) {
    if (expanded === this.state.expandedScopes.has(scope.name)) {
      return;
    } // TODO: (wbinnssmith) T30771435 this setState depends on current state
    // and should use an updater function rather than an object
    // eslint-disable-next-line react/no-access-state-in-setstate


    const expandedScopes = new Set(this.state.expandedScopes);

    if (expanded) {
      expandedScopes.add(scope.name);
    } else {
      expandedScopes.delete(scope.name);
    }

    this.setState({
      expandedScopes
    });
  }

  render() {
    const {
      scopes
    } = this.state;

    if (scopes.isError) {
      return /*#__PURE__*/React.createElement("span", null, "Error fetching scopes: ", scopes.error.toString());
    } else if (scopes.isPending) {
      return LOADING;
    } else if (scopes.value.length === 0) {
      return /*#__PURE__*/React.createElement("span", null, "(no variables)");
    }

    const scopeSections = scopes.value.map(scope => this._renderScopeSection(scope));
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
      className: "debugger-expression-value-list"
    }, scopeSections));
  }

}

exports.default = ScopesComponent;

class ScopeComponent extends React.Component {
  render() {
    const {
      variables
    } = this.props;

    if (variables.isError) {
      return /*#__PURE__*/React.createElement("div", null, "Error fetching scope variables ", variables.error.toString());
    } else if (variables.isPending) {
      return LOADING;
    } else if (variables.value.length === 0) {
      return NO_VARIABLES;
    } else {
      return variables.value.map(variable => this._renderVariable(variable));
    }
  }

  _renderVariable(expression) {
    return /*#__PURE__*/React.createElement("div", {
      className: "debugger-expression-value-row debugger-scope",
      key: expression.name
    }, /*#__PURE__*/React.createElement("div", {
      className: "debugger-expression-value-content"
    }, /*#__PURE__*/React.createElement(_ExpressionTreeComponent.ExpressionTreeComponent, {
      expression: expression,
      containerContext: this.props.containerContext
    })));
  }

}

module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,