"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _Button = require("@atom-ide-community/nuclide-commons-ui/Button");

var _ButtonGroup = require("@atom-ide-community/nuclide-commons-ui/ButtonGroup");

var _Dropdown = require("@atom-ide-community/nuclide-commons-ui/Dropdown");

var _Tabs = _interopRequireDefault(require("@atom-ide-community/nuclide-commons-ui/Tabs"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _assert = _interopRequireDefault(require("assert"));

var _AtomServiceContainer = require("../AtomServiceContainer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* global localStorage */
// TODO those should be managed by the debugger store state
function setLastUsedDebugger(host, action, debuggerDisplayName) {
  const key = "DEBUGGER_LAST_USED_" + host + "_" + action;
  localStorage.setItem(key, debuggerDisplayName);
}

function getLastUsedDebugger(host, action) {
  const key = "DEBUGGER_LAST_USED_" + host + "_" + action;
  return localStorage.getItem(key);
} // Older published debugger packages did not provide `getTabName()`.
// TODO(most): Remove this once newer debugger versions get adoption.


function getTabName(provider) {
  var _provider$_debuggingT;

  if (typeof provider.getTabName === "function") {
    return provider.getTabName();
  }

  return (_provider$_debuggingT = provider._debuggingTypeName) !== null && _provider$_debuggingT !== void 0 ? _provider$_debuggingT : "";
}

class DebuggerLaunchAttachUI extends React.Component {
  constructor(props) {
    super(props);
    this.props = void 0;
    this.state = void 0;
    this._disposables = void 0;

    this._setConfigValid = valid => {
      this.setState({
        configIsValid: valid
      });
    };

    this._disposables = new _UniversalDisposable.default();

    this._disposables.add(atom.commands.add("atom-workspace", {
      "core:confirm": () => {
        if (this.state.configIsValid) {
          this._rememberTab(); // Close the dialog, but do it on the next tick so that the child
          // component gets to handle the event first (and start the debugger).


          process.nextTick(this.props.dialogCloser);
        }
      }
    }), atom.commands.add("atom-workspace", {
      "core:cancel": () => {
        this._rememberTab();

        this.props.dialogCloser();
      }
    }));

    this.state = {
      selectedProviderTab: null,
      configIsValid: false,
      enabledProviders: []
    };
  }

  _rememberTab() {
    // Remember the last tab the user used for this connection when the "launch/attach"
    // button is clicked.
    const host = _nuclideUri.default.isRemote(this.props.connection) ? _nuclideUri.default.getHostname(this.props.connection) : "local";

    if (this.state.selectedProviderTab != null) {
      setLastUsedDebugger(host, this.props.dialogMode, this.state.selectedProviderTab || "");
    }
  }

  UNSAFE_componentWillMount() {
    const host = _nuclideUri.default.isRemote(this.props.connection) ? _nuclideUri.default.getHostname(this.props.connection) : "local";
    const selectedProvider = (this.props.providers.get(host) || []).find(p => getTabName(p) === this.props.initialSelectedTabName);

    if (selectedProvider != null) {
      setLastUsedDebugger(host, this.props.dialogMode, getTabName(selectedProvider));
    }

    this._filterProviders(host);

    this.setState({
      selectedProviderTab: getLastUsedDebugger(host, this.props.dialogMode)
    });
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    const host = _nuclideUri.default.isRemote(nextProps.connection) ? _nuclideUri.default.getHostname(nextProps.connection) : "local";

    this._filterProviders(host);

    this.setState({
      selectedProviderTab: getLastUsedDebugger(host, nextProps.dialogMode)
    });
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  async _getProviderIfEnabled(provider) {
    const enabled = await provider.getCallbacksForAction(this.props.dialogMode).isEnabled();
    return enabled ? provider : null;
  }

  _filterProviders(key) {
    this.setState({
      enabledProviders: []
    }); // eslint-disable-next-line nuclide-internal/unused-subscription

    _rxjsCompatUmdMin.Observable.merge(...(this.props.providers.get(key) || []).map(provider => _rxjsCompatUmdMin.Observable.fromPromise(this._getProviderIfEnabled(provider)))).filter(provider => provider != null).map(provider => {
      (0, _assert.default)(provider != null);
      const tabName = getTabName(provider);
      return {
        provider,
        tabName
      };
    }).scan((arr, provider) => arr.concat(provider), []).subscribe(enabledProviders => {
      this.setState({
        enabledProviders
      });
    });
  }

  _getTabsFromEnabledProviders(enabledProviders) {
    const tabs = this.state.enabledProviders.map(debuggerType => ({
      name: debuggerType.tabName,
      tabContent: /*#__PURE__*/React.createElement("span", {
        title: debuggerType.tabName,
        className: "debugger-provider-tab"
      }, debuggerType.tabName)
    })).sort((a, b) => a.name.localeCompare(b.name));
    return tabs;
  }

  setState(partialState, callback) {
    if (typeof partialState === "function") {
      super.setState(partialState, callback);
    } else {
      const fullState = { ...this.state,
        ...partialState
      };

      if (fullState.selectedProviderTab == null) {
        const tabs = this._getTabsFromEnabledProviders(fullState.enabledProviders);

        if (tabs.length > 0) {
          const firstTab = tabs[0];
          fullState.selectedProviderTab = firstTab.name;
        }
      }

      super.setState(fullState, callback);
    }
  }

  render() {
    const tabs = this._getTabsFromEnabledProviders(this.state.enabledProviders);

    let providerContent = null;

    if (tabs.length > 0) {
      let selectedTab = this.state.selectedProviderTab != null ? this.state.selectedProviderTab : this.state.enabledProviders[0].tabName;
      let provider = this.state.enabledProviders.find(p => p.tabName === selectedTab);

      if (provider == null) {
        provider = this.state.enabledProviders[0];
        selectedTab = provider.tabName;
      }

      const defaultConfig = selectedTab != null && selectedTab === this.props.initialSelectedTabName ? this.props.initialProviderConfig : null;
      const debuggerConfigPage = provider.provider.getCallbacksForAction(this.props.dialogMode).getComponent(selectedTab, valid => this._setConfigValid(valid), defaultConfig);
      providerContent = /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_Tabs.default, {
        className: "debugger-launch-attach-tabs",
        tabs: tabs,
        growable: true,
        activeTabName: this.state.selectedProviderTab,
        triggeringEvent: "onClick",
        onActiveTabChange: newTab => {
          this._setConfigValid(false);

          this.setState({
            selectedProviderTab: newTab.name
          });
        }
      }), /*#__PURE__*/React.createElement("div", {
        className: "debugger-launch-attach-tabcontent"
      }, debuggerConfigPage));
    } else {
      // No debugging providers available.
      providerContent = /*#__PURE__*/React.createElement("div", {
        className: "debugger-launch-attach-tabcontent"
      }, "No debuggers installed, look for available debuggers on", " ", /*#__PURE__*/React.createElement("a", {
        href: "https://atom.io/packages/search?q=atom-ide-debugger-"
      }, "atom.io/packages"));
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "padded debugger-launch-attach-container"
    }, (0, _AtomServiceContainer.isNuclideEnvironment)() ? /*#__PURE__*/React.createElement("h1", {
      className: "debugger-launch-attach-header"
    }, /*#__PURE__*/React.createElement("span", {
      className: "padded"
    }, this.props.dialogMode === "attach" ? "Attach debugger to " : "Launch debugger on "), /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
      className: "inline",
      options: this.props.connectionOptions,
      onChange: value => this.props.connectionChanged(value),
      size: "xs",
      value: this.props.connection
    })) : null, providerContent, /*#__PURE__*/React.createElement("div", {
      className: "debugger-launch-attach-actions"
    }, /*#__PURE__*/React.createElement(_ButtonGroup.ButtonGroup, null, /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: () => atom.commands.dispatch(atom.views.getView(atom.workspace), "core:cancel")
    }, "Cancel"), /*#__PURE__*/React.createElement(_Button.Button, {
      buttonType: _Button.ButtonTypes.PRIMARY,
      disabled: !this.state.configIsValid,
      onClick: () => atom.commands.dispatch(atom.views.getView(atom.workspace), "core:confirm")
    }, this.props.dialogMode === "attach" ? "Attach" : "Launch"))));
  }

}

exports.default = DebuggerLaunchAttachUI;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,