"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debuggerDatatip = debuggerDatatip;

var _bindObservableAsProps = require("@atom-ide-community/nuclide-commons-ui/bindObservableAsProps");

var _evaluationExpression = require("./evaluationExpression");

var _constants = require("./constants");

var _DebuggerDatatipComponent = _interopRequireDefault(require("./ui/DebuggerDatatipComponent"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function debuggerDatatip(service, editor, position) {
  if (service.viewModel.focusedProcess == null || service.viewModel.focusedProcess.debuggerMode !== _constants.DebuggerMode.PAUSED) {
    return null;
  }

  const activeEditor = atom.workspace.getActiveTextEditor();

  if (activeEditor == null) {
    return null;
  }

  const evaluationExpression = (0, _evaluationExpression.getDefaultEvaluationExpression)(editor, position);

  if (evaluationExpression == null) {
    return null;
  }

  const {
    expression,
    range
  } = evaluationExpression;
  const {
    focusedProcess,
    focusedStackFrame
  } = service.viewModel;

  if (expression == null || focusedProcess == null) {
    // TODO respect session.capabilities.supportsEvaluateForHovers
    // and fallback to scopes variables resolution.
    return null;
  }

  const propStream = (0, _utils.evaluateExpressionAsStream)(service.createExpression(expression), focusedProcess, focusedStackFrame, "hover").map(exp => ({
    expression: exp,
    hideExpressionName: true,
    readOnly: true
  }));
  return {
    component: (0, _bindObservableAsProps.bindObservableAsProps)(propStream, _DebuggerDatatipComponent.default),
    range
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlYnVnZ2VyRGF0YXRpcC5qcyJdLCJuYW1lcyI6WyJkZWJ1Z2dlckRhdGF0aXAiLCJzZXJ2aWNlIiwiZWRpdG9yIiwicG9zaXRpb24iLCJ2aWV3TW9kZWwiLCJmb2N1c2VkUHJvY2VzcyIsImRlYnVnZ2VyTW9kZSIsIkRlYnVnZ2VyTW9kZSIsIlBBVVNFRCIsImFjdGl2ZUVkaXRvciIsImF0b20iLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVUZXh0RWRpdG9yIiwiZXZhbHVhdGlvbkV4cHJlc3Npb24iLCJleHByZXNzaW9uIiwicmFuZ2UiLCJmb2N1c2VkU3RhY2tGcmFtZSIsInByb3BTdHJlYW0iLCJjcmVhdGVFeHByZXNzaW9uIiwibWFwIiwiZXhwIiwiaGlkZUV4cHJlc3Npb25OYW1lIiwicmVhZE9ubHkiLCJjb21wb25lbnQiLCJEZWJ1Z2dlckRhdGF0aXBDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVPLGVBQWVBLGVBQWYsQ0FDTEMsT0FESyxFQUVMQyxNQUZLLEVBR0xDLFFBSEssRUFJYztBQUNuQixNQUNFRixPQUFPLENBQUNHLFNBQVIsQ0FBa0JDLGNBQWxCLElBQW9DLElBQXBDLElBQ0FKLE9BQU8sQ0FBQ0csU0FBUixDQUFrQkMsY0FBbEIsQ0FBaUNDLFlBQWpDLEtBQWtEQyx3QkFBYUMsTUFGakUsRUFHRTtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUNELFFBQU1DLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVDLG1CQUFmLEVBQXJCOztBQUNBLE1BQUlILFlBQVksSUFBSSxJQUFwQixFQUEwQjtBQUN4QixXQUFPLElBQVA7QUFDRDs7QUFDRCxRQUFNSSxvQkFBb0IsR0FBRywwREFBK0JYLE1BQS9CLEVBQXVDQyxRQUF2QyxDQUE3Qjs7QUFDQSxNQUFJVSxvQkFBb0IsSUFBSSxJQUE1QixFQUFrQztBQUNoQyxXQUFPLElBQVA7QUFDRDs7QUFDRCxRQUFNO0FBQUVDLElBQUFBLFVBQUY7QUFBY0MsSUFBQUE7QUFBZCxNQUF3QkYsb0JBQTlCO0FBQ0EsUUFBTTtBQUFFUixJQUFBQSxjQUFGO0FBQWtCVyxJQUFBQTtBQUFsQixNQUF3Q2YsT0FBTyxDQUFDRyxTQUF0RDs7QUFDQSxNQUFJVSxVQUFVLElBQUksSUFBZCxJQUFzQlQsY0FBYyxJQUFJLElBQTVDLEVBQWtEO0FBQ2hEO0FBQ0E7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNWSxVQUFVLEdBQUcsdUNBQ2pCaEIsT0FBTyxDQUFDaUIsZ0JBQVIsQ0FBeUJKLFVBQXpCLENBRGlCLEVBRWpCVCxjQUZpQixFQUdqQlcsaUJBSGlCLEVBSWpCLE9BSmlCLEVBS2pCRyxHQUxpQixDQUtaQyxHQUFELEtBQVU7QUFBRU4sSUFBQUEsVUFBVSxFQUFFTSxHQUFkO0FBQW1CQyxJQUFBQSxrQkFBa0IsRUFBRSxJQUF2QztBQUE2Q0MsSUFBQUEsUUFBUSxFQUFFO0FBQXZELEdBQVYsQ0FMYSxDQUFuQjtBQU9BLFNBQU87QUFDTEMsSUFBQUEsU0FBUyxFQUFFLGtEQUFzQk4sVUFBdEIsRUFBa0NPLGlDQUFsQyxDQUROO0FBRUxULElBQUFBO0FBRkssR0FBUDtBQUlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBEYXRhdGlwIH0gZnJvbSBcImF0b20taWRlLXVpXCJcbmltcG9ydCB0eXBlIHsgSURlYnVnU2VydmljZSB9IGZyb20gXCIuL3R5cGVzXCJcblxuaW1wb3J0IHsgYmluZE9ic2VydmFibGVBc1Byb3BzIH0gZnJvbSBcIkBhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zLXVpL2JpbmRPYnNlcnZhYmxlQXNQcm9wc1wiXG5pbXBvcnQgeyBnZXREZWZhdWx0RXZhbHVhdGlvbkV4cHJlc3Npb24gfSBmcm9tIFwiLi9ldmFsdWF0aW9uRXhwcmVzc2lvblwiXG5pbXBvcnQgeyBEZWJ1Z2dlck1vZGUgfSBmcm9tIFwiLi9jb25zdGFudHNcIlxuaW1wb3J0IERlYnVnZ2VyRGF0YXRpcENvbXBvbmVudCBmcm9tIFwiLi91aS9EZWJ1Z2dlckRhdGF0aXBDb21wb25lbnRcIlxuaW1wb3J0IHsgZXZhbHVhdGVFeHByZXNzaW9uQXNTdHJlYW0gfSBmcm9tIFwiLi91dGlsc1wiXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWJ1Z2dlckRhdGF0aXAoXG4gIHNlcnZpY2U6IElEZWJ1Z1NlcnZpY2UsXG4gIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgcG9zaXRpb246IGF0b20kUG9pbnRcbik6IFByb21pc2U8P0RhdGF0aXA+IHtcbiAgaWYgKFxuICAgIHNlcnZpY2Uudmlld01vZGVsLmZvY3VzZWRQcm9jZXNzID09IG51bGwgfHxcbiAgICBzZXJ2aWNlLnZpZXdNb2RlbC5mb2N1c2VkUHJvY2Vzcy5kZWJ1Z2dlck1vZGUgIT09IERlYnVnZ2VyTW9kZS5QQVVTRURcbiAgKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBhY3RpdmVFZGl0b3IgPSBhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVUZXh0RWRpdG9yKClcbiAgaWYgKGFjdGl2ZUVkaXRvciA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBjb25zdCBldmFsdWF0aW9uRXhwcmVzc2lvbiA9IGdldERlZmF1bHRFdmFsdWF0aW9uRXhwcmVzc2lvbihlZGl0b3IsIHBvc2l0aW9uKVxuICBpZiAoZXZhbHVhdGlvbkV4cHJlc3Npb24gPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgY29uc3QgeyBleHByZXNzaW9uLCByYW5nZSB9ID0gZXZhbHVhdGlvbkV4cHJlc3Npb25cbiAgY29uc3QgeyBmb2N1c2VkUHJvY2VzcywgZm9jdXNlZFN0YWNrRnJhbWUgfSA9IHNlcnZpY2Uudmlld01vZGVsXG4gIGlmIChleHByZXNzaW9uID09IG51bGwgfHwgZm9jdXNlZFByb2Nlc3MgPT0gbnVsbCkge1xuICAgIC8vIFRPRE8gcmVzcGVjdCBzZXNzaW9uLmNhcGFiaWxpdGllcy5zdXBwb3J0c0V2YWx1YXRlRm9ySG92ZXJzXG4gICAgLy8gYW5kIGZhbGxiYWNrIHRvIHNjb3BlcyB2YXJpYWJsZXMgcmVzb2x1dGlvbi5cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgY29uc3QgcHJvcFN0cmVhbSA9IGV2YWx1YXRlRXhwcmVzc2lvbkFzU3RyZWFtKFxuICAgIHNlcnZpY2UuY3JlYXRlRXhwcmVzc2lvbihleHByZXNzaW9uKSxcbiAgICBmb2N1c2VkUHJvY2VzcyxcbiAgICBmb2N1c2VkU3RhY2tGcmFtZSxcbiAgICBcImhvdmVyXCJcbiAgKS5tYXAoKGV4cCkgPT4gKHsgZXhwcmVzc2lvbjogZXhwLCBoaWRlRXhwcmVzc2lvbk5hbWU6IHRydWUsIHJlYWRPbmx5OiB0cnVlIH0pKVxuXG4gIHJldHVybiB7XG4gICAgY29tcG9uZW50OiBiaW5kT2JzZXJ2YWJsZUFzUHJvcHMocHJvcFN0cmVhbSwgRGVidWdnZXJEYXRhdGlwQ29tcG9uZW50KSxcbiAgICByYW5nZSxcbiAgfVxufVxuIl19