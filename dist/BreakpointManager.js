"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _BreakpointDisplayController = _interopRequireDefault(require("./BreakpointDisplayController"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class BreakpointManager {
  constructor(service) {
    this._service = void 0;
    this._displayControllers = void 0;
    this._disposables = void 0;
    this._service = service;
    this._displayControllers = new Map();
    this._disposables = new _UniversalDisposable.default(atom.workspace.observeTextEditors(this._handleTextEditor.bind(this)));
  }

  dispose() {
    this._disposables.dispose();

    this._displayControllers.forEach(controller => controller.dispose());

    this._displayControllers.clear();
  }
  /**
   * Used for testing.
   */


  getDisplayControllers() {
    return this._displayControllers;
  }
  /**
   * Delegate callback from BreakpointDisplayController.
   */


  handleTextEditorDestroyed(controller) {
    controller.dispose();

    this._displayControllers.delete(controller.getEditor());
  }

  _handleTextEditor(editor) {
    if (!this._displayControllers.has(editor)) {
      const controller = new _BreakpointDisplayController.default(this, this._service, editor);

      this._displayControllers.set(editor, controller);
    }
  }

}

exports.default = BreakpointManager;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJyZWFrcG9pbnRNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbIkJyZWFrcG9pbnRNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlIiwiX3NlcnZpY2UiLCJfZGlzcGxheUNvbnRyb2xsZXJzIiwiX2Rpc3Bvc2FibGVzIiwiTWFwIiwiVW5pdmVyc2FsRGlzcG9zYWJsZSIsImF0b20iLCJ3b3Jrc3BhY2UiLCJvYnNlcnZlVGV4dEVkaXRvcnMiLCJfaGFuZGxlVGV4dEVkaXRvciIsImJpbmQiLCJkaXNwb3NlIiwiZm9yRWFjaCIsImNvbnRyb2xsZXIiLCJjbGVhciIsImdldERpc3BsYXlDb250cm9sbGVycyIsImhhbmRsZVRleHRFZGl0b3JEZXN0cm95ZWQiLCJkZWxldGUiLCJnZXRFZGl0b3IiLCJlZGl0b3IiLCJoYXMiLCJCcmVha3BvaW50RGlzcGxheUNvbnRyb2xsZXIiLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFFQTs7QUFDQTs7OztBQUVlLE1BQU1BLGlCQUFOLENBQXdCO0FBS3JDQyxFQUFBQSxXQUFXLENBQUNDLE9BQUQsRUFBeUI7QUFBQSxTQUpwQ0MsUUFJb0M7QUFBQSxTQUhwQ0MsbUJBR29DO0FBQUEsU0FGcENDLFlBRW9DO0FBQ2xDLFNBQUtGLFFBQUwsR0FBZ0JELE9BQWhCO0FBQ0EsU0FBS0UsbUJBQUwsR0FBMkIsSUFBSUUsR0FBSixFQUEzQjtBQUNBLFNBQUtELFlBQUwsR0FBb0IsSUFBSUUsNEJBQUosQ0FBd0JDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxrQkFBZixDQUFrQyxLQUFLQyxpQkFBTCxDQUF1QkMsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBbEMsQ0FBeEIsQ0FBcEI7QUFDRDs7QUFFREMsRUFBQUEsT0FBTyxHQUFTO0FBQ2QsU0FBS1IsWUFBTCxDQUFrQlEsT0FBbEI7O0FBQ0EsU0FBS1QsbUJBQUwsQ0FBeUJVLE9BQXpCLENBQWtDQyxVQUFELElBQWdCQSxVQUFVLENBQUNGLE9BQVgsRUFBakQ7O0FBQ0EsU0FBS1QsbUJBQUwsQ0FBeUJZLEtBQXpCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxFQUFBQSxxQkFBcUIsR0FBc0Q7QUFDekUsV0FBTyxLQUFLYixtQkFBWjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRWMsRUFBQUEseUJBQXlCLENBQUNILFVBQUQsRUFBMEM7QUFDakVBLElBQUFBLFVBQVUsQ0FBQ0YsT0FBWDs7QUFDQSxTQUFLVCxtQkFBTCxDQUF5QmUsTUFBekIsQ0FBZ0NKLFVBQVUsQ0FBQ0ssU0FBWCxFQUFoQztBQUNEOztBQUVEVCxFQUFBQSxpQkFBaUIsQ0FBQ1UsTUFBRCxFQUEwQjtBQUN6QyxRQUFJLENBQUMsS0FBS2pCLG1CQUFMLENBQXlCa0IsR0FBekIsQ0FBNkJELE1BQTdCLENBQUwsRUFBMkM7QUFDekMsWUFBTU4sVUFBVSxHQUFHLElBQUlRLG9DQUFKLENBQWdDLElBQWhDLEVBQXNDLEtBQUtwQixRQUEzQyxFQUFxRGtCLE1BQXJELENBQW5COztBQUNBLFdBQUtqQixtQkFBTCxDQUF5Qm9CLEdBQXpCLENBQTZCSCxNQUE3QixFQUFxQ04sVUFBckM7QUFDRDtBQUNGOztBQXJDb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IElEZWJ1Z1NlcnZpY2UgfSBmcm9tIFwiLi90eXBlc1wiXG5cbmltcG9ydCBVbml2ZXJzYWxEaXNwb3NhYmxlIGZyb20gXCJAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9Vbml2ZXJzYWxEaXNwb3NhYmxlXCJcbmltcG9ydCBCcmVha3BvaW50RGlzcGxheUNvbnRyb2xsZXIgZnJvbSBcIi4vQnJlYWtwb2ludERpc3BsYXlDb250cm9sbGVyXCJcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJlYWtwb2ludE1hbmFnZXIge1xuICBfc2VydmljZTogSURlYnVnU2VydmljZVxuICBfZGlzcGxheUNvbnRyb2xsZXJzOiBNYXA8YXRvbSRUZXh0RWRpdG9yLCBCcmVha3BvaW50RGlzcGxheUNvbnRyb2xsZXI+XG4gIF9kaXNwb3NhYmxlczogVW5pdmVyc2FsRGlzcG9zYWJsZVxuXG4gIGNvbnN0cnVjdG9yKHNlcnZpY2U6IElEZWJ1Z1NlcnZpY2UpIHtcbiAgICB0aGlzLl9zZXJ2aWNlID0gc2VydmljZVxuICAgIHRoaXMuX2Rpc3BsYXlDb250cm9sbGVycyA9IG5ldyBNYXAoKVxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gbmV3IFVuaXZlcnNhbERpc3Bvc2FibGUoYXRvbS53b3Jrc3BhY2Uub2JzZXJ2ZVRleHRFZGl0b3JzKHRoaXMuX2hhbmRsZVRleHRFZGl0b3IuYmluZCh0aGlzKSkpXG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICAgIHRoaXMuX2Rpc3BsYXlDb250cm9sbGVycy5mb3JFYWNoKChjb250cm9sbGVyKSA9PiBjb250cm9sbGVyLmRpc3Bvc2UoKSlcbiAgICB0aGlzLl9kaXNwbGF5Q29udHJvbGxlcnMuY2xlYXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgZm9yIHRlc3RpbmcuXG4gICAqL1xuICBnZXREaXNwbGF5Q29udHJvbGxlcnMoKTogTWFwPGF0b20kVGV4dEVkaXRvciwgQnJlYWtwb2ludERpc3BsYXlDb250cm9sbGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXlDb250cm9sbGVyc1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGVnYXRlIGNhbGxiYWNrIGZyb20gQnJlYWtwb2ludERpc3BsYXlDb250cm9sbGVyLlxuICAgKi9cbiAgaGFuZGxlVGV4dEVkaXRvckRlc3Ryb3llZChjb250cm9sbGVyOiBCcmVha3BvaW50RGlzcGxheUNvbnRyb2xsZXIpIHtcbiAgICBjb250cm9sbGVyLmRpc3Bvc2UoKVxuICAgIHRoaXMuX2Rpc3BsYXlDb250cm9sbGVycy5kZWxldGUoY29udHJvbGxlci5nZXRFZGl0b3IoKSlcbiAgfVxuXG4gIF9oYW5kbGVUZXh0RWRpdG9yKGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yKSB7XG4gICAgaWYgKCF0aGlzLl9kaXNwbGF5Q29udHJvbGxlcnMuaGFzKGVkaXRvcikpIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQnJlYWtwb2ludERpc3BsYXlDb250cm9sbGVyKHRoaXMsIHRoaXMuX3NlcnZpY2UsIGVkaXRvcilcbiAgICAgIHRoaXMuX2Rpc3BsYXlDb250cm9sbGVycy5zZXQoZWRpdG9yLCBjb250cm9sbGVyKVxuICAgIH1cbiAgfVxufVxuIl19