"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openSourceLocation = openSourceLocation;
exports.getLineForEvent = getLineForEvent;
exports.isLocalScopeName = isLocalScopeName;
exports.evaluateExpressionAsStream = evaluateExpressionAsStream;
exports.onUnexpectedError = onUnexpectedError;
exports.capitalize = capitalize;
exports.notifyOpenDebugSession = notifyOpenDebugSession;

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _rxjs = require("rxjs");

var _logger = _interopRequireDefault(require("./logger"));

var _expected = require("@atom-ide-community/nuclide-commons/expected");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getGutterLineNumber(target) {
  const eventLine = parseInt(target.dataset.line, 10);

  if (eventLine != null && eventLine >= 0 && !isNaN(Number(eventLine))) {
    return eventLine;
  }
}

const SCREEN_ROW_ATTRIBUTE_NAME = "data-screen-row";

function getEditorLineNumber(editor, target) {
  let node = target;

  while (node != null) {
    if (node.hasAttribute(SCREEN_ROW_ATTRIBUTE_NAME)) {
      const screenRow = Number(node.getAttribute(SCREEN_ROW_ATTRIBUTE_NAME));

      try {
        return editor.bufferPositionForScreenPosition([screenRow, 0]).row;
      } catch (error) {
        return null;
      }
    }

    node = node.parentElement;
  }
}

async function getEditorOrNull(path) {
  try {
    // eslint-disable-next-line nuclide-internal/atom-apis
    return await atom.workspace.open(path, {
      searchAllPanes: true,
      pending: true
    });
  } catch (error) {
    return null;
  }
}

async function openSourceLocation(path, line) {
  const editor = await getEditorOrNull(path);

  if (editor == null) {
    // Failed to open file.
    return null;
  }

  editor.scrollToBufferPosition([line, 0]);
  editor.setCursorBufferPosition([line, 0]); // Put the focus back in the console prompt.

  atom.commands.dispatch(atom.views.getView(atom.workspace), "atom-ide-console:focus-console-prompt");
  return editor;
}

function firstNonNull(...args) {
  return (0, _nullthrows.default)(args.find(arg => arg != null));
}

function getLineForEvent(editor, event) {
  const cursorLine = editor.getLastCursor().getBufferRow();
  const target = event ? event.target : null;

  if (target == null) {
    return cursorLine;
  } // toggleLine is the line the user clicked in the gutter next to, as opposed
  // to the line the editor's cursor happens to be in. If this command was invoked
  // from the menu, then the cursor position is the target line.


  return firstNonNull(getGutterLineNumber(target), getEditorLineNumber(editor, target), // fall back to the line the cursor is on.
  cursorLine);
}

function isLocalScopeName(scopeName) {
  return ["Local", "Locals"].indexOf(scopeName) !== -1;
}

function evaluateExpressionAsStream(expression, focusedProcess, focusedStackFrame, context) {
  return _rxjs.Observable.fromPromise(expression.evaluate(focusedProcess, focusedStackFrame, context)).catch(error => _rxjs.Observable.of(_expected.Expect.error(error))).map(() => _expected.Expect.value(expression)).startWith(_expected.Expect.pending());
}

function onUnexpectedError(error) {
  const errorMessage = error.stack || error.message || String(error);

  _logger.default.error("Unexpected error", error);

  atom.notifications.addError("Atom debugger ran into an unexpected error - please file a bug!", {
    detail: errorMessage
  });
}

function capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}

function notifyOpenDebugSession() {
  atom.notifications.addInfo("Received a debug request, but there's an open debug session already!", {
    detail: "Please terminate your existing debug session"
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,