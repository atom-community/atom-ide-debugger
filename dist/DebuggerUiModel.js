"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WORKSPACE_VIEW_URI = void 0;

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _atom = require("atom");

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const WORKSPACE_VIEW_URI = "atom://nuclide/debugger";
exports.WORKSPACE_VIEW_URI = WORKSPACE_VIEW_URI;
const CONNECTIONS_UPDATED_EVENT = "CONNECTIONS_UPDATED_EVENT";
const PROVIDERS_UPDATED_EVENT = "PROVIDERS_UPDATED_EVENT";
/**
 * Atom ViewProvider compatible model object.
 */

class DebuggerModel {
  // Debugger providers
  constructor(service) {
    this._disposables = void 0;
    this._service = void 0;
    this._emitter = void 0;
    this._debuggerProviders = void 0;
    this._connections = void 0;
    this._service = service;
    this._emitter = new _atom.Emitter();
    this._debuggerProviders = new Set(); // There is always a local connection.

    this._connections = ["local"];
    this._disposables = new _UniversalDisposable.default(this._listenForProjectChange());
  }

  _listenForProjectChange() {
    return atom.project.onDidChangePaths(() => {
      this._updateConnections();
    });
  }
  /**
   * Utility for getting refreshed connections.
   * TODO: refresh connections when new directories are removed/added in file-tree.
   */


  _updateConnections() {
    const connections = this._getRemoteConnections(); // Always have one single local connection.


    connections.push("local");
    this._connections = connections;

    this._emitter.emit(CONNECTIONS_UPDATED_EVENT);
  }
  /**
   * Get remote connections without duplication.
   */


  _getRemoteConnections() {
    // TODO: move this logic into RemoteConnection package.
    return atom.project.getPaths().filter(path => {
      return _nuclideUri.default.isRemote(path);
    }).map(remotePath => {
      const {
        hostname
      } = _nuclideUri.default.parseRemoteUri(remotePath);

      return _nuclideUri.default.createRemoteUri(hostname, "/");
    }).filter((path, index, inputArray) => {
      return inputArray.indexOf(path) === index;
    });
  }

  dispose() {
    this._disposables.dispose();
  }

  addDebuggerProvider(provider) {
    this._debuggerProviders.add(provider);

    this._emitter.emit(PROVIDERS_UPDATED_EVENT);
  }

  removeDebuggerProvider(provider) {
    this._debuggerProviders.delete(provider);
  }
  /**
   * Subscribe to new connection updates from DebuggerActions.
   */


  onConnectionsUpdated(callback) {
    return this._emitter.on(CONNECTIONS_UPDATED_EVENT, callback);
  }

  onProvidersUpdated(callback) {
    return this._emitter.on(PROVIDERS_UPDATED_EVENT, callback);
  }

  getConnections() {
    return this._connections;
  }
  /**
   * Return available launch/attach provider for input connection.
   * Caller is responsible for disposing the results.
   */


  getLaunchAttachProvidersForConnection(connection) {
    const availableLaunchAttachProviders = [];

    for (const provider of this._debuggerProviders) {
      const launchAttachProvider = provider.getLaunchAttachProvider(connection);

      if (launchAttachProvider != null) {
        availableLaunchAttachProviders.push(launchAttachProvider);
      }
    }

    return availableLaunchAttachProviders;
  }

}

exports.default = DebuggerModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlYnVnZ2VyVWlNb2RlbC5qcyJdLCJuYW1lcyI6WyJXT1JLU1BBQ0VfVklFV19VUkkiLCJDT05ORUNUSU9OU19VUERBVEVEX0VWRU5UIiwiUFJPVklERVJTX1VQREFURURfRVZFTlQiLCJEZWJ1Z2dlck1vZGVsIiwiY29uc3RydWN0b3IiLCJzZXJ2aWNlIiwiX2Rpc3Bvc2FibGVzIiwiX3NlcnZpY2UiLCJfZW1pdHRlciIsIl9kZWJ1Z2dlclByb3ZpZGVycyIsIl9jb25uZWN0aW9ucyIsIkVtaXR0ZXIiLCJTZXQiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwiX2xpc3RlbkZvclByb2plY3RDaGFuZ2UiLCJhdG9tIiwicHJvamVjdCIsIm9uRGlkQ2hhbmdlUGF0aHMiLCJfdXBkYXRlQ29ubmVjdGlvbnMiLCJjb25uZWN0aW9ucyIsIl9nZXRSZW1vdGVDb25uZWN0aW9ucyIsInB1c2giLCJlbWl0IiwiZ2V0UGF0aHMiLCJmaWx0ZXIiLCJwYXRoIiwibnVjbGlkZVVyaSIsImlzUmVtb3RlIiwibWFwIiwicmVtb3RlUGF0aCIsImhvc3RuYW1lIiwicGFyc2VSZW1vdGVVcmkiLCJjcmVhdGVSZW1vdGVVcmkiLCJpbmRleCIsImlucHV0QXJyYXkiLCJpbmRleE9mIiwiZGlzcG9zZSIsImFkZERlYnVnZ2VyUHJvdmlkZXIiLCJwcm92aWRlciIsImFkZCIsInJlbW92ZURlYnVnZ2VyUHJvdmlkZXIiLCJkZWxldGUiLCJvbkNvbm5lY3Rpb25zVXBkYXRlZCIsImNhbGxiYWNrIiwib24iLCJvblByb3ZpZGVyc1VwZGF0ZWQiLCJnZXRDb25uZWN0aW9ucyIsImdldExhdW5jaEF0dGFjaFByb3ZpZGVyc0ZvckNvbm5lY3Rpb24iLCJjb25uZWN0aW9uIiwiYXZhaWxhYmxlTGF1bmNoQXR0YWNoUHJvdmlkZXJzIiwibGF1bmNoQXR0YWNoUHJvdmlkZXIiLCJnZXRMYXVuY2hBdHRhY2hQcm92aWRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUdBOztBQUNBOztBQUNBOzs7O0FB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QSxjQUFjLEdBQWtCO0FBQzlCLFdBQU8sS0FBS3BDLFlBQVo7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBOzs7QUFDRXFDLEVBQUFBLHFDQUFxQyxDQUFDQyxVQUFELEVBQTBEO0FBQzdGLFVBQU1DLDhCQUE4QixHQUFHLEVBQXZDOztBQUNBLFNBQUssTUFBTVgsUUFBWCxJQUF1QixLQUFLN0Isa0JBQTVCLEVBQWdEO0FBQzlDLFlBQU15QyxvQkFBb0IsR0FBR1osUUFBUSxDQUFDYSx1QkFBVCxDQUFpQ0gsVUFBakMsQ0FBN0I7O0FBQ0EsVUFBSUUsb0JBQW9CLElBQUksSUFBNUIsRUFBa0M7QUFDaENELFFBQUFBLDhCQUE4QixDQUFDNUIsSUFBL0IsQ0FBb0M2QixvQkFBcEM7QUFDRDtBQUNGOztBQUNELFdBQU9ELDhCQUFQO0FBQ0Q7O0FBbEdnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRGVidWdnZXJMYXVuY2hBdHRhY2hQcm92aWRlciwgTnVjbGlkZURlYnVnZ2VyUHJvdmlkZXIgfSBmcm9tIFwiQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWRlYnVnZ2VyLWNvbW1vblwiXG5pbXBvcnQgdHlwZSB7IElEZWJ1Z1NlcnZpY2UgfSBmcm9tIFwiLi90eXBlc1wiXG5cbmltcG9ydCBVbml2ZXJzYWxEaXNwb3NhYmxlIGZyb20gXCJAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9Vbml2ZXJzYWxEaXNwb3NhYmxlXCJcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiYXRvbVwiXG5pbXBvcnQgbnVjbGlkZVVyaSBmcm9tIFwiQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvbnVjbGlkZVVyaVwiXG5cbmV4cG9ydCBjb25zdCBXT1JLU1BBQ0VfVklFV19VUkkgPSBcImF0b206Ly9udWNsaWRlL2RlYnVnZ2VyXCJcblxuY29uc3QgQ09OTkVDVElPTlNfVVBEQVRFRF9FVkVOVCA9IFwiQ09OTkVDVElPTlNfVVBEQVRFRF9FVkVOVFwiXG5jb25zdCBQUk9WSURFUlNfVVBEQVRFRF9FVkVOVCA9IFwiUFJPVklERVJTX1VQREFURURfRVZFTlRcIlxuXG4vKipcbiAqIEF0b20gVmlld1Byb3ZpZGVyIGNvbXBhdGlibGUgbW9kZWwgb2JqZWN0LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEZWJ1Z2dlck1vZGVsIHtcbiAgX2Rpc3Bvc2FibGVzOiBVbml2ZXJzYWxEaXNwb3NhYmxlXG4gIF9zZXJ2aWNlOiBJRGVidWdTZXJ2aWNlXG4gIF9lbWl0dGVyOiBFbWl0dGVyXG5cbiAgLy8gRGVidWdnZXIgcHJvdmlkZXJzXG4gIF9kZWJ1Z2dlclByb3ZpZGVyczogU2V0PE51Y2xpZGVEZWJ1Z2dlclByb3ZpZGVyPlxuICBfY29ubmVjdGlvbnM6IEFycmF5PHN0cmluZz5cblxuICBjb25zdHJ1Y3RvcihzZXJ2aWNlOiBJRGVidWdTZXJ2aWNlKSB7XG4gICAgdGhpcy5fc2VydmljZSA9IHNlcnZpY2VcblxuICAgIHRoaXMuX2VtaXR0ZXIgPSBuZXcgRW1pdHRlcigpXG4gICAgdGhpcy5fZGVidWdnZXJQcm92aWRlcnMgPSBuZXcgU2V0KClcbiAgICAvLyBUaGVyZSBpcyBhbHdheXMgYSBsb2NhbCBjb25uZWN0aW9uLlxuICAgIHRoaXMuX2Nvbm5lY3Rpb25zID0gW1wibG9jYWxcIl1cblxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gbmV3IFVuaXZlcnNhbERpc3Bvc2FibGUodGhpcy5fbGlzdGVuRm9yUHJvamVjdENoYW5nZSgpKVxuICB9XG5cbiAgX2xpc3RlbkZvclByb2plY3RDaGFuZ2UoKTogSURpc3Bvc2FibGUge1xuICAgIHJldHVybiBhdG9tLnByb2plY3Qub25EaWRDaGFuZ2VQYXRocygoKSA9PiB7XG4gICAgICB0aGlzLl91cGRhdGVDb25uZWN0aW9ucygpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBVdGlsaXR5IGZvciBnZXR0aW5nIHJlZnJlc2hlZCBjb25uZWN0aW9ucy5cbiAgICogVE9ETzogcmVmcmVzaCBjb25uZWN0aW9ucyB3aGVuIG5ldyBkaXJlY3RvcmllcyBhcmUgcmVtb3ZlZC9hZGRlZCBpbiBmaWxlLXRyZWUuXG4gICAqL1xuICBfdXBkYXRlQ29ubmVjdGlvbnMoKTogdm9pZCB7XG4gICAgY29uc3QgY29ubmVjdGlvbnMgPSB0aGlzLl9nZXRSZW1vdGVDb25uZWN0aW9ucygpXG4gICAgLy8gQWx3YXlzIGhhdmUgb25lIHNpbmdsZSBsb2NhbCBjb25uZWN0aW9uLlxuICAgIGNvbm5lY3Rpb25zLnB1c2goXCJsb2NhbFwiKVxuICAgIHRoaXMuX2Nvbm5lY3Rpb25zID0gY29ubmVjdGlvbnNcbiAgICB0aGlzLl9lbWl0dGVyLmVtaXQoQ09OTkVDVElPTlNfVVBEQVRFRF9FVkVOVClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcmVtb3RlIGNvbm5lY3Rpb25zIHdpdGhvdXQgZHVwbGljYXRpb24uXG4gICAqL1xuICBfZ2V0UmVtb3RlQ29ubmVjdGlvbnMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgLy8gVE9ETzogbW92ZSB0aGlzIGxvZ2ljIGludG8gUmVtb3RlQ29ubmVjdGlvbiBwYWNrYWdlLlxuICAgIHJldHVybiBhdG9tLnByb2plY3RcbiAgICAgIC5nZXRQYXRocygpXG4gICAgICAuZmlsdGVyKChwYXRoKSA9PiB7XG4gICAgICAgIHJldHVybiBudWNsaWRlVXJpLmlzUmVtb3RlKHBhdGgpXG4gICAgICB9KVxuICAgICAgLm1hcCgocmVtb3RlUGF0aCkgPT4ge1xuICAgICAgICBjb25zdCB7IGhvc3RuYW1lIH0gPSBudWNsaWRlVXJpLnBhcnNlUmVtb3RlVXJpKHJlbW90ZVBhdGgpXG4gICAgICAgIHJldHVybiBudWNsaWRlVXJpLmNyZWF0ZVJlbW90ZVVyaShob3N0bmFtZSwgXCIvXCIpXG4gICAgICB9KVxuICAgICAgLmZpbHRlcigocGF0aCwgaW5kZXgsIGlucHV0QXJyYXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGlucHV0QXJyYXkuaW5kZXhPZihwYXRoKSA9PT0gaW5kZXhcbiAgICAgIH0pXG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmRpc3Bvc2UoKVxuICB9XG5cbiAgYWRkRGVidWdnZXJQcm92aWRlcihwcm92aWRlcjogTnVjbGlkZURlYnVnZ2VyUHJvdmlkZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9kZWJ1Z2dlclByb3ZpZGVycy5hZGQocHJvdmlkZXIpXG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KFBST1ZJREVSU19VUERBVEVEX0VWRU5UKVxuICB9XG5cbiAgcmVtb3ZlRGVidWdnZXJQcm92aWRlcihwcm92aWRlcjogTnVjbGlkZURlYnVnZ2VyUHJvdmlkZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9kZWJ1Z2dlclByb3ZpZGVycy5kZWxldGUocHJvdmlkZXIpXG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIG5ldyBjb25uZWN0aW9uIHVwZGF0ZXMgZnJvbSBEZWJ1Z2dlckFjdGlvbnMuXG4gICAqL1xuICBvbkNvbm5lY3Rpb25zVXBkYXRlZChjYWxsYmFjazogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5vbihDT05ORUNUSU9OU19VUERBVEVEX0VWRU5ULCBjYWxsYmFjaylcbiAgfVxuXG4gIG9uUHJvdmlkZXJzVXBkYXRlZChjYWxsYmFjazogKCkgPT4gdm9pZCk6IElEaXNwb3NhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5fZW1pdHRlci5vbihQUk9WSURFUlNfVVBEQVRFRF9FVkVOVCwgY2FsbGJhY2spXG4gIH1cblxuICBnZXRDb25uZWN0aW9ucygpOiBBcnJheTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYXZhaWxhYmxlIGxhdW5jaC9hdHRhY2ggcHJvdmlkZXIgZm9yIGlucHV0IGNvbm5lY3Rpb24uXG4gICAqIENhbGxlciBpcyByZXNwb25zaWJsZSBmb3IgZGlzcG9zaW5nIHRoZSByZXN1bHRzLlxuICAgKi9cbiAgZ2V0TGF1bmNoQXR0YWNoUHJvdmlkZXJzRm9yQ29ubmVjdGlvbihjb25uZWN0aW9uOiBzdHJpbmcpOiBBcnJheTxEZWJ1Z2dlckxhdW5jaEF0dGFjaFByb3ZpZGVyPiB7XG4gICAgY29uc3QgYXZhaWxhYmxlTGF1bmNoQXR0YWNoUHJvdmlkZXJzID0gW11cbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHRoaXMuX2RlYnVnZ2VyUHJvdmlkZXJzKSB7XG4gICAgICBjb25zdCBsYXVuY2hBdHRhY2hQcm92aWRlciA9IHByb3ZpZGVyLmdldExhdW5jaEF0dGFjaFByb3ZpZGVyKGNvbm5lY3Rpb24pXG4gICAgICBpZiAobGF1bmNoQXR0YWNoUHJvdmlkZXIgIT0gbnVsbCkge1xuICAgICAgICBhdmFpbGFibGVMYXVuY2hBdHRhY2hQcm92aWRlcnMucHVzaChsYXVuY2hBdHRhY2hQcm92aWRlcilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGF2YWlsYWJsZUxhdW5jaEF0dGFjaFByb3ZpZGVyc1xuICB9XG59XG4iXX0=